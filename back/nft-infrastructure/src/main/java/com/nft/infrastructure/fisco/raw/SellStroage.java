package com.nft.infrastructure.fisco.raw;

import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.*;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("unchecked")
public class SellStroage extends Contract {
    public static final String[] BINARY_ARRAY = {"","","","","00823e3d601f19601f82011682018060405250612f529190810190613585565b8282815181101515612f6057fe5b906020019060200201819052508080600101915050612e88565b508091505092915050565b6060806004604051908082528060200260200182016040528015612fbd57816020015b6060815260200190600190039081612fa85790505b50905085816000815181101515612fd057fe5b9060200190602002018190525084816001815181101515612fed57fe5b906020019060200201819052508381600281518110151561300a57fe5b906020019060200201819052508281600381518110151561302757fe5b9060200190602002018190525061303d816131ce565b915050949350505050565b606080600660405190808252806020026020018201604052801561308057816020015b606081526020019060019003908161306b5790505b5090508781600081518110151561309357fe5b90602001906020020181905250868160018151811015156130b057fe5b90602001906020020181905250858160028151811015156130cd57fe5b90602001906020020181905250848160038151811015156130ea57fe5b906020019060200201819052508381600481518110151561310757fe5b906020019060200201819052508281600581518110151561312457fe5b9060200190602002018190525061313a816131ce565b9150509695505050505050565b606080600260405190808252806020026020018201604052801561317f57816020015b606081526020019060019003908161316a5790505b5090508381600081518110151561319257fe5b90602001906020020181905250828160018151811015156131af57fe5b906020019060200201819052506131c5816131ce565b91505092915050565b6060600080905060008090505b835181101561320e5783818151811015156131f257fe5b90602001906020020151518201915080806001019150506131db565b506060816040519080825280601f01601f1916602001820160405280156132445781602001600182028038833980820191505090505b5090506060819050600080905060008090505b8651811015613346576060878281518110151561327057fe5b90602001906020020151905060008090505b815181101561333757818181518110151561329957fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f01000000000000000000000000000000000000000000000000000000000000000285858151811015156132f257fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535083806001019450508080600101915050613282565b50508080600101915050613257565b5081945050505050919050565b600061335f8251613b79565b905092915050565b60006133738251613b8b565b905092915050565b60006133878251613b9d565b905092915050565b600061339b8251613baf565b905092915050565b60006133af8251613bc1565b905092915050565b600082601f83011215156133ca57600080fd5b81356133dd6133d882613add565b613ab0565b915080825260208301602083018583830111156133f957600080fd5b613404838284613c2f565b50505092915050565b600082601f830112151561342057600080fd5b815161343361342e82613add565b613ab0565b9150808252602083016020830185838301111561344f57600080fd5b61345a838284613c3e565b50505092915050565b600061346f8235613bcb565b905092915050565b60006020828403121561348957600080fd5b600061349784828501613353565b91505092915050565b6000602082840312156134b257600080fd5b60006134c084828501613367565b91505092915050565b6000602082840312156134db57600080fd5b60006134e98482850161337b565b91505092915050565b60006020828403121561350457600080fd5b60006135128482850161338f565b91505092915050565b60006020828403121561352d57600080fd5b600061353b848285016133a3565b91505092915050565b60006020828403121561355657600080fd5b600082013567ffffffffffffffff81111561357057600080fd5b61357c848285016133b7565b91505092915050565b60006020828403121561359757600080fd5b600082015167ffffffffffffffff8111156135b157600080fd5b6135bd8482850161340d565b91505092915050565b600080604083850312156135d957600080fd5b600083013567ffffffffffffffff8111156135f357600080fd5b6135ff858286016133b7565b925050602061361085828601613463565b9150509250929050565b61362381613b43565b82525050565b61363281613bd5565b82525050565b61364181613bf9565b82525050565b61365081613b4f565b82525050565b61365f81613c1d565b82525050565b600061367082613b26565b808452613684816020860160208601613c3e565b61368d81613c71565b602085010191505092915050565b60006136a682613b1b565b8084526136ba816020860160208601613c3e565b6136c381613c71565b602085010191505092915050565b6000815460018116600081146136ee576001811461370e5761374f565b607f600283041680865260ff19831660208701526040860193505061374f565b6002820480865260208601955061372485613b09565b60005b8281101561374657815481890152600182019150602081019050613727565b80880195505050505b505092915050565b6000600182527f30000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000600a82527f6b657920657869747321000000000000000000000000000000000000000000006020830152604082019050919050565b6000601082527f706172616d6574726963206572726f72000000000000000000000000000000006020830152604082019050919050565b6000602082019050613811600083018461361a565b92915050565b600060208201905061382c6000830184613647565b92915050565b60006060820190506138476000830186613647565b81810360208301526138598185613665565b9050818103604083015261386d8184613665565b9050949350505050565b600060208201905061388c6000830184613656565b92915050565b600060208201905081810360008301526138ac818461369b565b905092915050565b600060208201905081810360008301526138ce8184613665565b905092915050565b600060408201905081810360008301526138f08185613665565b90506138ff6020830184613629565b9392505050565b600060408201905081810360008301526139208185613665565b905061392f6020830184613638565b9392505050565b600060608201905081810360008301526139508186613665565b905061395f6020830185613638565b61396c6040830184613629565b949350505050565b6000604082019050818103600083015261398e818561369b565b905081810360208301526139a2818461369b565b90509392505050565b600060208201905081810360008301526139c581846136d1565b905092915050565b600060408201905081810360008301526139e781856136d1565b905081810360208301526139fb818461369b565b90509392505050565b60006040820190508181036000830152613a1e81856136d1565b90508181036020830152613a328184613665565b90509392505050565b60006040820190508181036000830152613a5581846136d1565b90508181036020830152613a6881613757565b905092915050565b60006020820190508181036000830152613a898161378e565b9050919050565b60006020820190508181036000830152613aa9816137c5565b9050919050565b6000604051905081810181811067ffffffffffffffff82111715613ad357600080fd5b8060405250919050565b600067ffffffffffffffff821115613af457600080fd5b601f19601f8301169050602081019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b6000613b3c82613b59565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613b8482613b31565b9050919050565b6000613b9682613b31565b9050919050565b6000613ba882613b31565b9050919050565b6000613bba82613b31565b9050919050565b6000819050919050565b6000819050919050565b6000613be082613be7565b9050919050565b6000613bf282613b59565b9050919050565b6000613c0482613c0b565b9050919050565b6000613c1682613b59565b9050919050565b6000613c2882613b4f565b9050919050565b82818337600083830152505050565b60005b83811015613c5c578082015181840152602081019050613c41565b83811115613c6b576000848401525b50505050565b6000601f19601f8301169050919050565b613c8a6140d5565b600060208301905060408051908101604052808451815260200182815250915050919050565b6060600082511415613cd45760206040519081016040528060008152509050613e0e565b60006001835103846000015102905060008090505b8351811015613d1f578381815181101515613d0057fe5b9060200190602002015160000151820191508080600101915050613ce9565b506060816040519080825280601f01601f191660200182016040528015613d555781602001600182028038833980820191505090505b509050600060208201905060008090505b8551811015613e0657613db0828783815181101515613d8157fe5b90602001906020020151602001518884815181101515613d9d57fe5b9060200190602002015160000151613f07565b8581815181101515613dbe57fe5b9060200190602002015160000151820191506001865103811015613df957613def8288602001518960000151613f07565b8660000151820191505b8080600101915050613d66565b508193505050505b92915050565b6000808260000151613e388560000151866020015186600001518760200151613f52565b0190505b836000015184602001510181111515613e845781806001019250508260000151613e7c856020015183038660000151038386600001518760200151613f52565b019050613e3c565b5092915050565b613e936140d5565b613e9e838383614037565b5092915050565b60608082600001516040519080825280601f01601f191660200182016040528015613edf5781602001600182028038833980820191505090505b5090506000602082019050613efd8185602001518660000151613f07565b8192505050919050565b5b602081101515613f2d5781518352602083019250602082019150602081039050613f08565b6000600182","6020036101000a0390508019835116818551168181178652505050505050565b6000808490506000868511151561402757602085111515613fdf57600060018660200360080260020a0319600102905060008186511690506000878a8a0103905060008386511690505b8281141515613fd1578186101515613fbe578a8a01965050505050505061402f565b8580600101965050838651169050613f9c565b85965050505050505061402f565b60008585209050600091505b85880382111515614025576000868420905080821415614011578394505050505061402f565b600184019350508180600101925050613feb565b505b868601925050505b949350505050565b61403f6140d5565b600061405d8560000151866020015186600001518760200151613f52565b9050846020015183602001818152505084602001518103836000018181525050846000015185602001510181141561409f5760008560000181815250506140ca565b8360000151836000015101856000018181510391508181525050836000015181018560200181815250505b829150509392505050565b60408051908101604052806000815260200160008152509056fea265627a7a7230582082099dbd305bff309f184c935808cad46ac4dd349f443ec622277f2130a118646c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"decrRemain\",\"outputs\":[{\"name\":\"_res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"catRemain\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"createSell\",\"outputs\":[{\"name\":\"_res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"catTotal\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"existSell\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"stopSell\",\"outputs\":[{\"name\":\"_res\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"string\"}],\"name\":\"catAuthor\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"retCode\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"primaryKey\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"uniqueKey\",\"type\":\"string\"}],\"name\":\"AddEvent\",\"type\":\"event\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_DECRREMAIN = "decrRemain";

    public static final String FUNC_CATREMAIN = "catRemain";

    public static final String FUNC_CREATESELL = "createSell";

    public static final String FUNC_CATTOTAL = "catTotal";

    public static final String FUNC_EXISTSELL = "existSell";

    public static final String FUNC_STOPSELL = "stopSell";

    public static final String FUNC_CATAUTHOR = "catAuthor";

    public static final Event ADDEVENT_EVENT = new Event("AddEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected SellStroage(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public TransactionReceipt decrRemain(String _hash) {
        final Function function = new Function(
                FUNC_DECRREMAIN,
                Arrays.<Type>asList(new Utf8String(_hash)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void decrRemain(String _hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DECRREMAIN,
                Arrays.<Type>asList(new Utf8String(_hash)),
                Collections.<TypeReference<?>>emptyList());
          asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDecrRemain(String _hash) {
        final Function function = new Function(
                FUNC_DECRREMAIN,
                Arrays.<Type>asList(new Utf8String(_hash)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDecrRemainInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DECRREMAIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getDecrRemainOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_DECRREMAIN,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public BigInteger catRemain(String _hash) throws ContractException {
        final Function function = new Function(FUNC_CATREMAIN,
                Arrays.<Type>asList(new Utf8String(_hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt createSell(String _hash, BigInteger amount) {
        final Function function = new Function(
                FUNC_CREATESELL,
                Arrays.<Type>asList(new Utf8String(_hash),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createSell(String _hash, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATESELL,
                Arrays.<Type>asList(new Utf8String(_hash),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
          asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateSell(String _hash, BigInteger amount) {
        final Function function = new Function(
                FUNC_CREATESELL,
                Arrays.<Type>asList(new Utf8String(_hash),
                new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getCreateSellInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATESELL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getCreateSellOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATESELL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public BigInteger catTotal(String _hash) throws ContractException {
        final Function function = new Function(FUNC_CATTOTAL,
                Arrays.<Type>asList(new Utf8String(_hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Boolean existSell(String _hash) throws ContractException {
        final Function function = new Function(FUNC_EXISTSELL,
                Arrays.<Type>asList(new Utf8String(_hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt stopSell(String _hash) {
        final Function function = new Function(
                FUNC_STOPSELL,
                Arrays.<Type>asList(new Utf8String(_hash)),
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public  void stopSell(String _hash, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_STOPSELL,
                Arrays.<Type>asList(new Utf8String(_hash)),
                Collections.<TypeReference<?>>emptyList());
          asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForStopSell(String _hash) {
        final Function function = new Function(
                FUNC_STOPSELL,
                Arrays.<Type>asList(new Utf8String(_hash)),
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getStopSellInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_STOPSELL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getStopSellOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_STOPSELL,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public String catAuthor(String _hash) throws ContractException {
        final Function function = new Function(FUNC_CATAUTHOR,
                Arrays.<Type>asList(new Utf8String(_hash)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List<AddEventEventResponse> getAddEventEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ADDEVENT_EVENT, transactionReceipt);
        ArrayList<AddEventEventResponse> responses = new ArrayList<AddEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            AddEventEventResponse typedResponse = new AddEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.retCode = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.primaryKey = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.uniqueKey = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeAddEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeAddEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(ADDEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static SellStroage load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new SellStroage(contractAddress, client, credential);
    }

    public static SellStroage deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(SellStroage.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class AddEventEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger retCode;

        public String primaryKey;

        public String uniqueKey;
    }
}
